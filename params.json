{"name":"Emacs-howdoi","tagline":"Emacs interface to the `howdoi` command line tool (https://github.com/gleitz/howdoi)","body":"Howdoi.el -- instant coding answers via Emacs.\r\n============\r\n\r\nDo you find yourself constantly Googling for how to do basic\r\nprograming tasks? Suppose you want to know how to format a date in\r\nbash. Why open your browser and read through blogs when you can just\r\nM-x howdoi-query RET format date bash RET\r\n\r\nHowdoi.el is a way to query Stack Overflow directly from the Emacs and\r\nget back the most upvoted answer to the first question that comes up\r\nfor that query.\r\n\r\nInstallation\r\n============\r\n\r\nCopy howdoi.el file to the ~/.emacs.d/ folder and put the line\r\n\r\n    (load-file \"~/.emacs.d/howdoi.el\")\r\n\r\ninto the ~/.emacs configuration file.\r\n\r\nUsage\r\n============\r\n\r\nThe following two commands show an answer in a pop up buffer:\r\n\r\n     M-x howdoi-query RET <your-query> RET ;; e.g.: M-x howdoi-query RET format date bash RET\r\n     M-x howdoi-query-line-at-point ;; takes a query from a line at point and shows an answer in a pop up buffer.\r\n\r\nTo get an answer containing only code snippet you could use:\r\n\r\n     M-x howdoi-query-line-at-point-replace-by-code-snippet\r\n\r\nthis command replaces current line with a code snippet parsed from an answer.\r\n\r\nWith that command you could get situation when it returns not good\r\nenough code snippet. Or may be after that command you would like to\r\nget more details which relates to the original query. Then you could\r\nuse the following command:\r\n\r\n    M-x howdoi-show-current-question\r\n\r\nThis one will show (in a pop up buffer) full answer which contains\r\nrecently inserted code snippet. This command may help sometimes to\r\navoid additional googling when original query is a little bit\r\nambiguous.\r\n\r\nBy default pop up buffer displays only answers. You could change\r\n`howdoi-display-question` custom variable to show also a question.\r\n\r\nIn the mentioned pop up buffer enables HowDoI major-mode. There are\r\nsuch key bindings are available:\r\n\r\n* n - `howdoi-show-next-question`\r\n* p - `howdoi-show-previous-question`\r\n* b - `howdoi-browse-current-question`\r\n* u - `howdoi-query`\r\n* &lt; - `beginning-of-buffer`\r\n* &gt; - `end-of-buffer`\r\n* q - `quit window`\r\n\r\nThere is also howdoi-minor-mode available with a list of key bindings:\r\n\r\n* C-c C-o n - `howdoi-show-next-question`\r\n* C-c C-o p - `howdoi-show-previous-question`\r\n* C-c C-o c - `howdoi-show-current-question`\r\n* C-c C-o b - `howdoi-browse-current-question`\r\n* C-c C-o u - `howdoi-query`\r\n* C-c C-o l - `howdoi-query-line-at-point`\r\n* C-c C-o r - `howdoi-query-line-at-point-replace-by-code-snippet`\r\n\r\n\r\nExample\r\n============\r\n\r\nFor example there is the line in the *scratch* buffer:\r\n\r\n    python file exists\r\n\r\npoint is located somewhere on this line.\r\n\r\nAfter `M-x howdoi-query-line-at-point-replace-by-code-snippet` this\r\nline will be replaced by something like the following:\r\n\r\n    try:\r\n       with open('filename'):\r\n           process()\r\n       except IOError:\r\n           print 'Oh dear.'\r\n\r\nOther example: there is the line in the *scratch* buffer:\r\n\r\n    elisp split string\r\n\r\nAfter `M-x howdoi-query-line-at-point-replace-by-code-snippet` this\r\nline will be replaced by:\r\n\r\n(split-string \"1.2.3\" \"\\\\.\")\r\n\r\nYou may be wondered: why \".\" is escaped with two '\\'? You could\r\nexecute then `M-x howdoi-show-current-question` and the full answer\r\nwill be shown so you'll be able to get an explanation.\r\n\r\nAnd last example: just execute `M-x howdoi-query RET howdoi RET` and\r\nit will return an answer in a pop up buffer.\r\n\r\nIn a pop up buffer you could press \"n\" to view next question, \"p\" to\r\nview previous question and \"b\" to browse question in a www browser.\r\n\r\nAuthor\r\n============\r\n\r\nAndrey Tykhonov (atykhonov at gmail.com; @atykhonov)\r\n\r\nNotes\r\n============\r\n\r\nPlease contribute if you like too! :) Otherwise write down your suggestions, comments, feature requests etc etc etc.\r\n\r\nThank you! And Enjoy!\r\n\r\nContributors\r\n============\r\n[Graydon Hoare](https://github.com/graydon)\r\n","google":"UA-47496284-1","note":"Don't delete this file! It's used internally to help with page regeneration."}